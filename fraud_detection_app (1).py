# -*- coding: utf-8 -*-
"""fraud detection app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_O3XKSxLEZ4xp0bruQTh3qClPSj_iDs9
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
from xgboost import XGBClassifier
import joblib

# Load the trained model
model = joblib.load('best_xgb_model.pkl')

# Function to preprocess the input data
def preprocess_data(input_data):
    # Perform the same preprocessing steps as you did in your training
    # For example, encoding categorical variables and scaling numerical features
    # Assuming 'incident_state' is the only categorical column
    label_encoder = LabelEncoder()
    input_data['incident_state_encoded'] = label_encoder.fit_transform(input_data['incident_state'])

    # Drop original categorical column
    input_data.drop(columns=['incident_state'], inplace=True)

    # Scale numerical features
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(input_data)

    return scaled_data

# Streamlit UI
st.title('Insurance Claims Fraud Detection')

# Input fields for the user
months_as_customer = st.number_input('Months as Customer', min_value=0)
age = st.number_input('Age', min_value=18)
policy_number = st.number_input('Policy Number')
policy_deductable = st.number_input('Policy Deductable')
policy_annual_premium = st.number_input('Policy Annual Premium')
incident_state = st.selectbox('Incident State', ['NC', 'NY', 'OH', 'PA', 'SC', 'VA', 'WV'])

# Button to make predictions
if st.button('Predict'):
    # Create a DataFrame from the input data
    input_data = pd.DataFrame({
        'months_as_customer': [months_as_customer],
        'age': [age],
        'policy_number': [policy_number],
        'policy_deductable': [policy_deductable],
        'policy_annual_premium': [policy_annual_premium],
        'incident_state': [incident_state]
    })

    # Preprocess the input data
    processed_data = preprocess_data(input_data)

    # Make prediction
    prediction = model.predict(processed_data)

    # Display the result
    if prediction[0] == 1:
        st.success('Fraudulent Claim Detected!')
    else:
        st.success('Claim is Not Fraudulent.')

