# -*- coding: utf-8 -*-
"""Fraud detection app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fJsYRvVosNUXwLbsLqturqqOyCU_Oeg5
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
from xgboost import XGBClassifier
import joblib

# Load the trained model
model = joblib.load('best_xgb_model.pkl')

# Function to preprocess the input data
def preprocess_data(input_data):
    # Assuming 'policy_state', 'insured_sex', 'insured_education_level',
    # 'incident_type', 'collision_type', 'incident_severity',
    # and 'authorities_contacted' are categorical columns
    categorical_columns = [
        'policy_state', 'insured_sex', 'insured_education_level','policy_csl',
        'incident_type', 'collision_type', 'incident_severity',
        'authorities_contacted', 'insured_hobbies'
    ]

    # Label encode each categorical column
    label_encoders = {}
    for col in categorical_columns:
        label_encoders[col] = LabelEncoder()
        input_data[col] = label_encoders[col].fit_transform(input_data[col])

    # Scale numerical features
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(input_data)

    return scaled_data

# Streamlit UI
st.title('Insurance Claims Fraud Detection')

# Input fields for the user
policy_number = st.number_input('Policy Number')
policy_state = st.selectbox('Policy State', ['NC', 'NY', 'OH', 'PA', 'SC', 'VA', 'WV'])
policy_csl = st.selectbox('Policy CSL', ['100/300', '250/500', '500/1000'])
insured_sex = st.selectbox('Insured Sex', ['Male', 'Female'])
insured_education_level = st.selectbox('Insured Education Level', ['High School', 'Associate', 'Bachelor', 'Masters', 'Doctorate'])
incident_type = st.selectbox('Incident Type', ['Single Vehicle Collision', 'Multi-vehicle Collision', 'Parking Lot', 'Rear-end'])
collision_type = st.selectbox('Collision Type', ['Front Collision', 'Side Collision', 'Rear Collision', 'Top Collision'])
incident_severity = st.selectbox('Incident Severity', ['Minor', 'Major', 'Critical'])
authorities_contacted = st.selectbox('Authorities Contacted', ['None', 'Police', 'Fire', 'Ambulance'])
incident_hour_of_the_day = st.number_input('Incident Hour of the Day', min_value=0, max_value=23)
number_of_vehicles_involved = st.number_input('Number of Vehicles Involved', min_value=1)
insured_hobbies = st.selectbox('Insured Hobbies', ['Reading', 'Traveling', 'Sports', 'Music', 'Gardening', 'Other'])
vehicle_claim = st.number_input('Vehicle Claim')
injury_claim = st.number_input('Injury Claim')
property_claim = st.number_input('Property Claim')
total_claim_amount = st.number_input('Total Claim Amount')

# Button to make predictions
if st.button('Predict'):
    # Create a DataFrame from the input data
    input_data = pd.DataFrame({
        'policy_number': [policy_number],
        'policy_state': [policy_state],
        'policy_csl': [policy_csl],
        'insured_sex': [insured_sex],
        'insured_education_level': [insured_education_level],
        'incident_type': [incident_type],
        'collision_type': [collision_type],
        'incident_severity': [incident_severity],
        'authorities_contacted': [authorities_contacted],
        'incident_hour_of_the_day': [incident_hour_of_the_day],
        'number_of_vehicles_involved': [number_of_vehicles_involved],
        'insured_hobbies': [insured_hobbies],
        'vehicle_claim': [vehicle_claim],
        'injury_claim': [injury_claim],
        'property_claim': [property_claim],
        'total_claim_amount': [total_claim_amount]
    })

    # Preprocess the input data
    processed_data = preprocess_data(input_data)

    # Make prediction
    prediction = model.predict(processed_data)

    # Display the result
    if prediction[0] == 1:
        st.success('Fraudulent Claim Detected!')
    else:
        st.success('Claim is Not Fraudulent.')

